[
["index.html", "Team PSD Manual Chapter 1 Team PSD Manual", " Team PSD Manual Team PSD 2020-08-10 Chapter 1 Team PSD Manual Welcome to Team PSD’s manual for all things related to resources and guides! Click within chapters and subsections or use the built-in search feature to search throughout the manual for key terms. "],
["2-standard-operations.html", "Chapter 2 Standard Operations 2.1 Team PSD 2.2 Scientific Values 2.3 Guiding Principles 2.4 Project Management Principles [flowmap needed] 2.5 Standard Operations", " Chapter 2 Standard Operations 2.1 Team PSD Meet the members and partners of Team Participatory Systems Dynamics at https://mtl.how 2.2 Scientific Values Team PSD Scientific Values guide additional Participatory and Open Science principles: Participatory Research encourages us to co-create our scientific research. Therefore… We share decisions, which requires a high level of documentation. We seek greater equity among partners in how collaborate, which requires responsive pivots with new stakeholder inputs. We strive use transparent and accessible processes and platforms, and develop transparent, accessible resources. 2.3 Guiding Principles 2.3.1 Open-Source, Transparent, Reproducible We value an open-source, transparent &amp; reproducible workflow. Most of our work is public-facing with the exception of any items that include Protected Health Information (PHI) or Personally Identifiable Information (PII). All of our public materials are free to download and use. We want our insights and resources to benefit the larger community. We use R, a free open-source coding language and a specific file naming convention to ensure all of our matierals are machine &amp; human readable (all lower case, no spaces, with dates as yyyy_mm_dd i.e. teampsd_guiding_principles_2020_01_01). Use email for any private discussions. Host any private files in password-protected locations or in folders behind the VA firewall. When in doubt, ask an HQ member or err on the side of caution. Make sure your work and accompanying documentation allows other team members or scientists in the field to reproduce and understand your work without further questions. 2.3.2 High Visibility Our work has high visibility. Keep in mind we work under the federal government of the United States for the Veterans Health Administration (VHA), the largest integrated healthcare system in the country. Everything we produce is a reflection of the VHA. We work with a wide range of nationally-distributed partners both internal and external to VA, including very important and high-level stakeholders. Double check the role and responsibility of people you are communicating with before you do. With these partners, we work in a participatory learning manner and iterate based on feedback from the field to ensure our work is responsive to ongoing changes. 2.3.3 Team Time Any time saved is team time. Ask questions early and often to prevent escalating issues down the road. Refer to existing resources (cheatsheets, checklists, etc.) as well for clarification. Double check all work before handing it off to the next team member to reduce rework. Think through dependencies across the team and partners and prioritize work based on the most recent information you have. Manage workflow asynchronously (via GitHub) and only schedule meetings when absolutely necessary. 2.3.4 Communication Use effective communication (across all types of communication including emails, GitHub, Lucid, etc.). Assume everyone you’re communicating with is smarter than you and cares more than you and is busier than you. Use clear and concise language, with formatting (bold, underline, bullets, etc) to emphasize the main decisions or issues making sure to include the “Who” “What” and “When”. Always include the full context and details necessary to make an informed decision (and make sure you are up to speed on the context and details before responding). Use complete sentences as much as possible and write in the active voice for clarity Often the team looks back to previous records of meetings, GitHub discussions, etc. to remember and track decisions that were already made or if they missed the meetings where an issue may have been discussed. As such, we always need to keep the most accurate record possible to reduce rework and provide clarity. Use emojis or humor (as appropriate) to help maintain a positive and collegial vibe. Turn on your webcam as much as possible for the face-to-face interaction. 2.3.5 Active Listening We use active listening skills to ensure understanding and accurate tracking. We work daily with team members and partners that are experts in their respective fields, and it is easy to lose track of a complex discussion. We’ve found that reflecting-back requests and decisions in your own words has been the best method to reduce miscommunication and to keep track of all of our decisions or issues accurately. If you ever need help while scribing, always “tap” someone else on the team for assistance. Ask for clarification and slow down if necessary. 2.3.5.1 Active listening is a stance. Taking the stance that misunderstanding is the norm and using skills appropriate to that reality. General skills: Reflecting content for efficiency and interpersonal rapport (i.e., avoiding rework and frustration) “When in doubt, check it out” - It’s the listener’s job to help the speaker understand what they are getting or what they missed. Let the speaker know when you’re falling behind. Stop them before the conversation exceeds your understanding. Use the same precise language/vocabulary, esp. Team PSD or MTL terms with specific meanings. “Chunking” components of what someone said (e.g., listen for the “and” when someone is speaking) Listen for the main points. This is a key skill to keep up with complex ideas in the moment (You don’t want to get bogged down on point 1 and miss point 2). Reflection of feeling - listen for the feeling words and reflect them exactly. Using the exact feeling word you heard is the safest way to ensure the person feels heard. Don’t reflect “frustration” when someone is expressing “disappointment” or “stress.” You can use these for non-verbals too. If you hear a feeling, it’s best to address it in your reflection. Synthesize two person’s ideas - or just two ideas (or more) e.g. “on the one hand, I hear Anthony saying…” and “on the other hand, I hear Stacey saying…” Synthesis brings the ideas together. It is not just active listening both ideas as separate ideas. Summarize - used when it’s time to wrap up, and move on, and a lot of ideas have been said. This is not the time to bring up new points. If you do have something to add, say it first. It’s best to end with a summary of the key points of consensus and the key take aways of what to do next. After you reflect, add to what the person is saying (a key to improv is “yes, and…” - don’t reject ideas, just try to understand first and then build on the ideas). Forward momentum comes from making sure you understand the person and add your own contribution. Listening is about being present to understand; you do not have to agree with what a person is saying. Before you even get to agreement/disagreement, make sure you have a shared understanding first. KEY IDEA: Really attend to make sure you understand. Do NOT think about your response when you should be listening. 2.3.5.2 Things to look out for when listening: Know thyself: You are the only one who knows whether it’s time to multi-task, focus, scribe/document as a form of listening, or whether typing would be a distraction. Repetition cycle: If the speaker you’re listening to keeps repeating something, your first move should be to assume that you’re missing something and ask what it is. Your own feelings: If you’re starting to feel frustrated, it’s a key sign that you should use active listening to get back on the same page. 2.4 Project Management Principles [flowmap needed] NOTE: Team PSD Scientific Values guide how and why we synthesize the approaches below Team PSD integrates Waterfall principles because: - We are a research team that cannot deviate in quality, scope, timeline or cost from our thoroughly developed and vetted research plan - Therefore, there are several well-defined scientific requirements where change cannot occur - unless the PI and co-I senior scientists advise an operational definition or implementation detail is within the scope of the federally funded and registered, scientifically peer-reviewed, and VA ORD and Stanford IRB reviewed procedures. Team PSD integrates Agile principles because: - Our research team’s method is a an implementation of participatory system dynamics in a national production environment. - These methods historically have iterated in-person locally. - Our innovation is local priorities, local data and local insights at national scale, made possible using online platforms and virtual processes. Team PSD integrates Waterfall and Agile principles because: - We are using a funded a priori research design (Waterfall) to study an implementation science (Agile) problem. - Producing generalizable knowledge requires implementation scientists to follow and report publicly progress completing a rigorous, replicable plan (Waterfall) - However, the context is not a tightly controlled laboratory, rather we are working with operational partners to implement our innovation the dynamic context of real world healthcare operations (Agile) Team PSD integrates Lean principles because: - Team PSD processes are assessed for continuous improvement (kaizen/muda elimination) - Team PSD communication is designed to reduce rework (muda/waste) - Team PSD encourages minimum viable products to find and synthesize team and partner expertise (just-in-time) - Team PSD platforms are designed to increase visual production controls (kanban/signboard; andon alerts) - Note: VA uses Lean as a primary approach to healthcare quality improvement. Team PSD integrates Scrum principles because: - We need to be able keep work produced by our transdisciplinary research team on the same page with our cross-functional team. - Therefore, we use sprints (epics/milestones)so that the team priorities can be aligned/re-aligned efficiently. - We also use workgroup leads (scrum masters), workgroups (owners) and workgroup meetings to benefit from the efficiency of divvying up/delegating, while also identifying dependencies and remove blocks. - We use GitHub/ZenHub and daily huddles to assign, scope, prioritize, manage and review our capacity, requirements, estimates - this includes Project Kanbans, Issue Cards, Pipelines &amp; Reporting. Team PSD Pain points we are working to better address: - Need &amp;&amp;tight collaboration without unnecessary overhead,** so culture of participation is maintained - Need rapid iterations that prototype, check early, and synthesize inputfrom key stakeholders as efficiently as possible, so we aren’t pulled in wasteful directions or adding unnecessary rework - Need a standard set of principles and processes, so our production platforms are stable at scale. Continuous Collaborative Iteration Cycles (e.g., “DevOps”) - SOP &gt; Workgroup Meetings &gt; Monthly Priorities &gt; Requirements gathering standardization for features - Tools for team members to understand cross-functional “stakes” efficiently - “Continuous integration” to avoid “merge conflicts” - Quotes are meant to clarify that we have this problem at a communication and conceptual level, not just a code level. We need the code level next…because… - Ideally…testing, deploying and documenting would be increasingly automated. - REALLY need continuous documentation and training. 2.5 Standard Operations 2.5.1 Policy 2.5.1.1 Scope This policy applies to all TeamPSD members involved with research under grants, R21DA042198, R01DA046651, IIRI01HX002521 commonly known as Modeling to Learn (MTL). This policy is subordinate to new or existing Veterans Administration (VA) policy. Any issues identified that are contrary to VA policy or federal laws should be brought to the attention of the Principal Investigator, Lindsey Zimmerman, (lindsey.zimmerman@va.gov). #### Purpose This policy details the governing principles, definitions, responsibilities and procedures for managing cards, issues, &amp; pull requests in the Kanban production management system for the issue_tracker, feature_tracker, document_tracker, and manuscript_tracker GitHub projects for the TeamPSD. Finally, the policy will describe how MTL and overarching research experimental design and reporting with be coordinated. #### Responsibilities * Principal Investigator - Provides overall direction and guidance to Workgroup Leads. Coordinates research activities and prioritizes activities within the MTL program with the HQ workgroup * Co-facilitators - Gathers field information and provides feedback to Workgroup Leads regarding the performance of a product in the teaching/learning environment. Facilitate Modeling to Learn 12 Session Program with identified clinics for the R01 and IIR grants. * Co-investigators - Oversees the science and research dependencies across the project. * Workgroup Leads - Oversees the production and maintenance of their products in terms of quality, cost and delivery, responding to the needs of the projects as defined by co-investigators and co-facilitators 1. Checks the bug_tracker, feature_tracker, document_tracker, and manuscript_tracker (as related to the workgroups) daily to identify &amp; assign interdependencies from the labels list used as a dependency check 2. Ensures that all cards are updated in the issue_tracker, feature_tracker, document_tracker, and manuscript_tracker (as relevant to the workgroup) in include a due date once they have been triaged with HQ &amp; other workgroup leads. 3. Trains respective workgroups in changes to policy &amp; procedures for Kanban workflow. 4. Estimates the time required to fulfill completion of bugs (issues) &amp; features. 5. Attends weekly Monday 8am PST / 11am EST Workgroup Leads meeting or alerts the HQ Proxy (see below) in their stead, should they not be able to attend. Proxy - An individual who is a member that supports a specific workgroup and can participate in the absence of the Workgroup Lead to represent the interests of a workgroup. A Proxy has the decision-making authority of the Workgroup Lead they represent. The Workgroup Lead must still provide detailed and concise documentation of questions and scope on bugs and features related to their workgroup in the Workgroup Leads meeting agenda. 2.5.2 Workgroups The table below describes all of the TeamPSD workgroups including their Workgroup Lead, Meeting Time, and Role. For each meeting, it is the responsibility of the Workgroup Lead or HQ point person to: 1. Set the agenda 2. Check RSVP’s for attendees 3. Clean up meeting notes for clarity 4. Send the follow-up email 4. Publish the meeting to Basecamp 5. Save Lucid audio in the TeamPSD folder: Meeting Agendas &amp; Recordings (and backup and save any mtl.how/live recordings as relevant) Workgroup (Workgroup Lead) (Meeting Time) Role Facilitate/EES (Jane) (Mon 10:00-11:00a Pacific, Wed 9:30-11:30a Pacific, Fri 9:30-11:30a Pacific; 3rd Friday 9:00-11:00a Pacific) Provides MTL program resources such as learner SEE and facilitator SAY scripts, checklists, guides, EES (Employee Education Services) brochures, and post-tests; and co-facilitates the MTL program. *Rita is the HQ point person for this workgroup. Grants (Lindsey) (Tues 10:00a-11:00a Pacific) Develops and maintains aims, strategies, and research plan for grants Headquarters (Lindsey) (Daily Check-In 12:30-1:00pm Pacific,Thurs 1:00-2:00pm Pacific,4th Friday 12:30-4:00pm Pacific) Manages oversight of all workgroups, identifying interdependencies and parallel workstreams. Provides guidance on prioritization. Manuscripts, Publications, and Conferences (Lindsey) (Mon 9:00a-12:00p Pacific)(Tues 10:00a-11:00a Pacific) Develops and maintains manuscripts, publication schedule, authorship agreement, and conference materials Modeling (James &amp; Tom) Builds models of systems that support clinician experimentation. Qualitative (David) (Tues 8:00a-9:00a Pacific) Codes team qhfd inputs for qualitative analysis and development of future fidelity materials. *Jessilyn is the HQ point person for this workgroup. Quantitative (Anthony) (Thurs 10:00a-11:00a Pacific) Provides data and analysis of data that supports other workgroups and research. Simulation User Interface (James) Provides an accessible, web-based user interface for practitioners to experiment using simulation. Workgroup Leads &amp; Support Workgroups (Stacey) (Mon 8:00a-9:00a Pacific, Thursday 8:00a-9:00a Pacific) Triage all issues that have entered into the issue-tracker triage section and identify workgroup milestones and action items for the month. Rearrange deadlines and interdependent timelines in response to emerging issues. VAPOR (Jennifer) (TBD) Provides veteran perspective and guidance on Modeling to Learn initiatives 2.5.3 Definitions Bug - An existing feature that has been developed and is not working correctly. Issue - An important topic or problem for discussion. Issues are documented in the GitHub Issues tab by selecting “New Issue.” Deliverable - A product of a task or group of tasks. Expedite - To move the priority of a bug or feature to the top of a queue. Expediting is poison to a production system and should be used only in exigent circumstances. Feature - A characteristic, attribute or topic that requires work breakdown, research, design, development and testing. Features can be tagged as “fast_track” in order to expedite its design and development. Features are documented in the GitHub Issues tab by selecting “New Feature” Kanban - A board that contains issue cards and is used to communicate the status and priority of bugs, features, documentation, &amp; manuscripts as they move through the production process. There are four Kanban to manage production in the MTL program: bug_tracker, feature_tracker, document_tracker, and manuscript_tracker. Task - A cognitive or kinetic behavior that consumes time. A task or group of tasks are necessary to create an outcome or deliverable. Labels - A tag in GitHub that is affixed by an originator or workgroup as a means to identify the task holders for a specific issue. Workgroup leads can filter by labels in the tracker to sort for their specific workgroup or other workgroups’ Kanban cards in the search bar found in the upper right-hand corner of each tracker (below). To use the filter function, use the code “label:labelname” i.e. “label:facilitate” or “label:sim_ui”. (You can use this function with other sort options as well i.e. author:lzim, etc.). In most cases, an issue should only have 1 label at any given time. 2.5.4 GitHub Labels Table Labels shall be assigned a color, expressed in lowercase and use an underscore in lieu of a space. Below is the list of labels and their purpose: Label Purpose document expresses a dependency for at least 1 of 5 levels (describe, detail, document, disseminate, depend) of documentation to be tracked on the document_tracker. The point person for each level of documentation will be responsible for checking the issue &amp; feature tracker for dependencies (describe: Jane &amp; Debbie; detail: Tom &amp; Lindsey; document: Stacey &amp; HQ; disseminate: Lindsey, Anthony; depend: Lindsey, Jane, &amp; Jessilyn) facilitate alert all of the facilitate workgroup to an issue that may affect facilitation (Lindsey, Jane, Debbie, Tom, David, Claire, Gayle, John, Matt, Jay, Theresa, Marcia) hq alert to HQ workgroup (Lindsey, Stacey, Rita, Jessilyn, Jennifer) to track manuscript expresses a dependency on manuscripts to be tracked on the manuscript_tracker model alert to Tom &amp; James of a dependency on the model workgroup pi alert to PI/Lindsey that an action or decision is necessary qual alert to David, Kathryn, Swap, Lindsey, Jessilyn, &amp; Stacey to of dependency on the qual workgroup quant alert to Anthony &amp; Ash of dependency on the quant workgroup sim_ui alert to sim_ui workgroup lead of an issue or dependency that affects the sim_ui. The workgroup lead will evaluate sim_ui impacts and collaborate with other workgroup leads to determine an adequate resolution. urgent indicates a short amount of time is available for resolution and needs to be prioritized by workgroup ees description to come vapor description to come 2.5.5 Kanban Management System 2.5.5.1 bug_tracker The issue_tracker is divided into 6 columns described below. The purpose of the issue_tracker is to provide triage and track the disposition of issues that require action by one or more workgroups. Issues labeled as “bugs” will be tracked here. needs_triage - This column is the main intake for all issues assigned to the issue_tracker. All issues requiring a disposition will land here. When an issue lands in this section, any team lead may review it and alert other leads as to the action required. validated_actions (ranked) - This column contains all issues that have received a “bug” disposition by a Workgroup Lead(s) and has been provided sufficient details to fix the problem. This is a rank-ordered list based on due dates indicated in the title. The rank-order of this section can be changed at any time. If an issue is determined to be a “feature,” it will be placed in the feature_kanban (see feature_kanban below). under_development - Bugs that are currently under development are listed in this column. This section may not be reprioritized, and contents are addressed first-in-first-out by respective workgroups. testing - Bugs that are currently being tested are listed in this column. Some issues may skip this step and go directly from under_development to done. done - This column contains completed issues. Responsible Workgroup Leads shall communicate completion of the action to the originator in the issue thread. The originator shall review the action, indicate their satisfaction/dissatisfaction. Once the originator is satisfied, the originator should close the issue and it will automatically go in the closed column. closed - This column contains issues closed by the originator from the done column. Any issue can be reopened as necessary. 2.5.5.2 feature_tracker The feature_tracker is divided into 9 columns described below. The purpose of the feature_tracker is to report and maintain information regarding the analysis of dependencies and work-content, and track the progress of issues that require development. Issues labeled as “features” will be tracked here. work_breakdown - Validated feature requirements that have received a disposition are listed here. Issues in this column are analyzed by Workgroup Leads for dependencies, effort content and milestones they may support (see Appendix 1 - issue_template). Issues will progress from this section to either the operations_to_do (ranked) or the research_to_do (ranked) sections. operations_to_do (ranked) - Features that require research, design and development of products in one or more workgroups are listed here in order of priority by due date indicated in the title. Issues here may be reprioritized at any time. research_to_do (ranked) - Features that support research, evaluation and documentation efforts directly related to supporting grants or higher-headquarters reporting requirements are listed there in order of priority by due date indicated in the title. Issues here may be reprioritized at any time. under_development - Operations or research features under development are listed here. This section may not be reprioritized, and contents are addressed first-in-first-out by respective workgroups. functional_testing - Features that are currently being tested for basic functionality (i.e. does it work?) are listed here. Some issues may skip this step and go directly from “under_development” to “done.” done - This column contains completed issues. Responsible Workgroup Leads shall communicate completion of the action to the originator in the issue thread. The originator shall review the action, indicate their satisfaction/dissatisfaction. Once the originator is satisfied, the originator should close the issue and it will automatically go in the closed column. closed - This column contains issues closed by the originator from the done column. Any issue can be reopened as necessary. future_release – This column contains unresolved feature ideas that would be great to include in a future MTL release, but currently is not a pressing need. 2.5.5.3 document_tracker The document_tracker is divided into 5 columns described below. The purpose of the document_tracker is to track documentation dependencies at 5 levels for each of the 12 sessions of Modeling to Learn. There will be a card for each session of the 12 sessions in each of the 5 Kanban columns which will be closed &amp; reopened as interdependencies get identified. Each column also has a “meta” card which is used to indicate interdependencies that are relevant to all/most of the 12 sessions as well as policy &amp; workflow decisions specific to that documentation column. describe_learners – Documentation dependencies relevant to learners, including SEE guides detail_facilitators - Documentation dependencies relevant to facilitators, including SAY guides &amp; one-pagers document_team - Documentation dependencies relevant to TeamPSD, including cheatsheets dissemintate_scientists_va - Documentation dependencies relevant to co-investigators &amp; larger scientific audience, including progress reports, code, grants, etc. depend_products - Documentation dependencies relevant to other MTL products, including videos 2.5.5.4 manuscript_tracker The manuscript_tracker is divided into 10 columns described below. The purpose of the manuscript_tracker is to track progress of manuscripts through 10 major stages until ready for publication. DO NOT post any direct manuscript content to GitHub; all drafts and related materials will be posted on the relevant OSF project. There will be a card per manuscript that moves through the tracker. 1. 01_osf_project – OSF project is created for this manuscript with all relevant materials posted, Zotero &amp; GitHub integrations approved, cheatsheets linked, and relevant people added 1. 02_authorship – Initial authorship weights and task division are identified 1. 03_write_analyze – Manuscript is written and materials for analysis are produced. 1. 04_edit – Manuscript goes under rounds of editing and revision between writing team. 1. 05_approve_letter – Team working on manuscript gives final approval and drafts letter to editor 1. 06_submit_under_review – Manuscript is submitted to relevant journals and is undergoing review 1. 07_revise_and_respond – Manuscript feedback is received from journals and team working on manuscript revises it accordingly 1. 08_resubmit – Manuscript is resubmitted to relevant journals 1. 09_accept – Manuscript is accepted for publishing by journals 1. 10_publish_publicize – Manuscript is published! 2.5.6 pull_requests are used to edit many types of files on Team PSD. 2.5.6.1 There are differences between pull requests for code and pull requests for documentation. Updates to MTL documentation are tracked in the document_tracker. The document_tracker represents the entire corpus of Modeling to Learn documentation at any given time. The document_tracker state for any MTL release is that all cards in the tracker are “closed.” This means that that all documentation is up-to-date, was reviewed and moved to production consistent with the current release of Modeling to Learn. Each card in the document_tracker includes a checklist that must be completed before the document is ready for release. Pull requests that are completed based on a document_tracker checklist should reference both the document_tracker card, the GitHub task issue assigned to them using cross-referencing with the relevant #/hashtag number. LZ Edits are still needed below here Feb. 20, 2020 Reviewers – Workgroup leads will develop code review procedures in their own workgroups. Including who will regularly review and merge pull requests each morning. Reviewers provide the final approval on commits, and merges and closes pull requests(merge &amp; delete branch). Assignees – Execute the task by creating a pull requests, make sure pull request is linked to appropriate card in the document_tracker, and the issue task that describes 2.5.7 Monthly Sprint: Management and Coordination of Milestones The main purpose of developing a monthly sprint milestone timeline is to help everyone in each workgroup look into the current and following month’s timeline and organize all possible dependencies and delegations. This will meet the need of how people can see where they are needed, reduce bottlenecking, and accomplish deliverables. The GitHub Milestone feature will be used to track high priority goals that must be accomplished by the end of the month. Issue, feature, manuscript, and document cards will be attached to a Milestone(s). Click here on how to create milestones. Milestones must be identified and outlined alongside their time cost (how long will it take to complete this and when is the earliest that it can be completed) by each workgroup. It is the responsibility of the Workgroup Lead to bring the draft Milestones to the 1st Workgroup Leads meeting of each month. The PI will join the 1st Workgroup Leads and Support Workgroups meeting of each month to provide clarification and guidance on that month’s Milestones. The 4th Tuesday All Hands meeting will be used to celebrate the successes and completion of each workgroup’s monthly milestones. 2.5.8 Workgroup Leads &amp; Support Workgroups Meetings When? Workgroup Leads meetings occur every Monday from 0800 PST to 0900 PST and Support Workgroups meetings occur every Thursday from 0800 PST to 0900 PST. If an ad-hoc Workgroup Lead and Support Workgroups meeting is required, any lead, Co-I or the Principal Investigator may coordinate a meeting with all other leads to resolve urgencies. Where? Meetings will be hosted on-line using Lucid. Regular Workgroup Lead meetings are scheduled and managed by HQ. Screen-sharing will be facilitated by Adobe Connect at mtl.how/live. Goal The goal of the meeting is to triage all issues that have entered into the issue-tracker triage section and identify workgroup interdependencies based on priorities for the week. Deadlines will be added or updated at this meeting based on changing priorities and scope. The PI will join the 1st Workgroup Leads and Support Workgroups meeting of each month. HQ will provide a draft dev/test/prod schedule outlining priorities, deliverables, and review dates across all workgroups for the month. Governing Principles * Prepare - if something is to be presented, be sure it is loaded up to Lucid meeting 24 hours prior to meeting and added to the New Business area of the agenda. * Document the discussion - take notes! * Keep the meeting moving along - stay on topic. * Stay aware of the time - a good meeting starts on time and ends on time. Standard Agenda * Role call * Assign note-taker (this should be a revolving duty). Note-taker will track decisions in Lucid and next steps or questions related to issues will be tracked directly in the issue thread. * Review and Triage open issues (on the mtl.how/issues tracker) * Review Old business - Items that were New Business in prior meetings where an update is necessary to update or close the issue. * Discuss New business - an item that affects the progress of an issue currently under development that may require discussion and decision. If a lead has an item of new business, it should be entered into the agenda prior to the meeting time. It should answer the following at a minimum: * What is it? * What does it affect in your workflow? * What do you need to resolve the issue? * When do you need it? "],
["3-team-psd-2-0-monthly-process.html", "Chapter 3 Team PSD 2.0 Monthly Process 3.1 Week 1: Gather User Hypotheses 3.2 Week 2: Clarify User Assumptions w/ MVP test 3.3 Week 3: Review User Results of MVP 3.4 Week 4: Review Second Story Perspectives", " Chapter 3 Team PSD 2.0 Monthly Process As Team PSD continues to grow, our workflow alongside team values in order to better support the needs of our team, just like how we developed Modeling to Learn to scale nationally in the Veterans Health Administration. The participatory learning principles we scaled in Modeling to Learn are: equitable access to resources mutual learning shared decision-making Team PSD 2.0 is about becoming more scalable due to continuous integration, deployment and documention. We aim for a completely free, accessible, transparent and reproducible workflow (aka “open science”). Our mission to improve how healthcare quality improvement decisions are made enlists diverse team members and partners. We want to empower effective contributions from all potential stakeholders. The Team PSD 2.0 Monthly Process is based on the design thinking principles of user experience, which attemps to account for a person’s needs, pain points, goals, and emotional experience when using a product/service and/or going through a process and system. Team PSD 2.0 Process for monthly sprints/epics: Week 1: Gather user-centered hypotheses Week 2: Clarify user assumptions w/ Minimum Viable Product (MVP) test Week 3: Review results of user persona testing of your MVP Prototype (with concurrent video and retrospective verbal) Week 4: Review user persona artifacts and second story perspectives mindfully and empathically to discover new understandings you might have missed or still need to learn Our monthly process for each monthly sprint/epic is based on the process for design thinking: 3.1 Week 1: Gather User Hypotheses In week 1, we want to gather the user centered hypotheses of the user/user group that we want to help and design for either by meeting with them and/or referring to their user personas. Hypotheses should consist of the user’s needs, pain points, and consider the background and context of the user. Week 1 follows the first phase of the process for design thinking which involves the ability to empathize with the user’s current state of experience. Empathize - To gain an empathic understanding of the need or problem you are trying to solve in terms of people, processes that set aside individual assumptions to get insight into the need. What? Details of what to do (what happened). This is when we analyze observe and document details that relate to users. How? How the person does it (effort, etc.) Why? Motivations/purpose (test this out…) Exercises for assumptions (remember: everything is a perspective): List assumptions Ask: How could this not be true? Ask: What if we could do this twice as well in half the time? Example of a User Persona: 3.2 Week 2: Clarify User Assumptions w/ MVP test In week 2, we want to narrow down the week 1 user centered hypotheses by clarifying assumptions based on those hypotheses. Assumptions the designer has based on week 1 hypotheses should clarified to define only the most crucial and necessary needs and pain points that will be addressed before prototyping a minimum viable product (MVP). This will prevent creating/designing for needs that do not solve 80% of the user’s pain points with only 20% effort being used in the development of the MVP and test and quickly rule out MVPs that do not respond to needs of the users in a fast and cheap manner. Week 2 follows the 2nd phase of the process for design thinking which involves the ability to define with the user’s specific set of problems that needs to be immediately addressed. Define the problem - This is when we synthesize observations into holistic point of view (POV). Goal is to make linkages, so that we define the right problem to address. [Example POV: Busy, nationally distributed, cross-functional team of scientists has many partners, is about to hire more people, leads a national participatory system dynamics simulation learning program in, and is gaining increasing national and international interest in partnership HMW…] 2a. A problem statement: Focuses on Specific peopleʼs needs (not the technology or specs), Value and insights for the project (not the technical requirements), yet it is… …narrow enough to be managed within our constraints Exercises for definitions with how-why/why-how laddering (a variant of 5 whys principle): Asking “Why?” Explores to understand root causes (abstract, more common across people) …then “How might we?” to get to a specific problem/challenge we can solve (concrete) Part I - The HMW Brainstorm…HMW use the efficiency of GitHub [good] remove the [bad] steep learning curve integrate with existing GH norms the best part [explore the opposite] remove reliance on training [question the assumption] go after adjectives [make it easy, instead of hard] use code instead of by hand [leverage unexpected resource] enable self-directed learning like “Googling” [analogy from need/context] attract help from Forio, MITRE, VA to solve this [shift POV against the challenge] get it up and running now [shift a status quo] divvy up chunks for each workgroup [break up POV] Part II “Why do we need to integrate our manuals, workflows and processes on GitHub to achieve Team PSD values? (if start with Why, phrase as a need and make it meaningful.” Because… “How do we use manuals, workflows and process on GitHub now?” [describe] “Why?” “Why?” What what was most surprising? What would we have missed if we hadnʼt asked why? 3.3 Week 3: Review User Results of MVP In week 3, we want to share our MVPs with the user to collect user feedback. To collect feedback, users will be participating in 2 Think Aloud protocols: Concurrent Screencast Video (no audio) and Retrospective Verbal. A Concurrent Screencast Video Think Aloud requires users to screencast themselves going through the MVP prototype, but without audio so they can focus soley on using the MVP. A Retrospective Verbal Think Aloud occurs after the Concurrent Screencase Video Think Aloud in which users think about how they felt about the MVP, what went wrong, what went right, what was missing, etc and write it up afterwards. These 2 Think Aloud protocols allows us to leverage both the pros and cons of a Concurrent and Retrospective Think Aloud in which: the Concurrent provides an undisturbed recording of the user going through the MVP. the Retrospective allows the users to verbalize their thoughts, emotions, and feelings about the MVP. Week 3 follows the 3rd and 4th phases of the process for design thinking which involves the ability to ideate MVPs based on the needs and assumptions of the users and get user feedback on a prototype MVP that will solve 80% of the user’s pain points and needs with only 20% effort. Ideate - Expand the problem space by identifying and testing out elements that would circumvent problems. time-limit quantity over quality no distractions no bad ideas Prototype - inexpensive, scaled down version with the key features to investigate the problem and solution. Goal is to identify the best possible solution. Solutions are investigated, accepted, improved, re-examined, rejected based on user-experiences. Should give much better sense sense of constraints and how users would behave, think, and feels when interaction with it. 3.3.1 Create Screencast Video 3.3.1.1 Instructions Make user-persona Concurrent Think Aloud videos testing Team PSD prototypes (aka MVPs: ‘minimum viable products’). 3.3.1.2 Context - Why this is critical for Team PSD 2.0 to scale? To scale Team PSD processes, we evaluate the usability and user experience of Team PSD prototypes. Passive Screen Video Observation Usability (quantitative MVP tests) This test is the concurrent think aloud protocol to detect problems with MVP assumptions. Prototype developers gain re-susable insights into the users (through the library). Users don’t have to think about producing these scalable artifacts (just upload). These files are named with this convention “date_skill_training_user” e.g., “2020_05_13_git_ch1_busy_pi” Verbalization User-experience (qualitative MVP tests) This test is the retrospective think aloud protocol to detect problems with MVP assumptions. Learning task performance. We need distributed Team PSD users to learn at scale. All prototypes are teaching our learners a skill they need to contribute to the team. As we upskill, we continuously integrate prototypes, which scales learning and improvement across Team PSD. 3.3.1.3 Record Screen (No Audio) 3.3.1.4 PC User (VA or Non-VA) 3.3.1.5 Non-VA, Windows 10 users only: Record screen using Game DVR The Game DVR feature can capture any application’s window. Press Windows + G in any application on Windows 10. Look for the Game Bar that will appear. Select “Yes, this is a game” even if the application isn’t a game. Reminder: Protect your privacy and only include information that is relevant for Team PSD prototyping. 3.3.1.6 VA or Non-VA: Record screen using PowerPoint Powerpoint can has a built-in ability to screencast your desktop and input the video onto a slide in blank powerpoint presentation. You can save the video file separately afterwards. Follow the guide here. Follow steps 1-6 under the header: Record from your computer screen and embed the recording in PowerPoint. VA Machine User: Your PowerPoint Version on your VA machine will be able to screencast with the instructions in the guide above. Non-VA Machine User: Be sure to check your PowerPoint versions as this only works in PowerPoint for Microsoft 365, PowerPoint 2019, PowerPoint 2016, PowerPoint 2013. Reminder: Protect your privacy and only include information that is relevant for Team PSD prototyping. 3.3.1.7 Mac User (Usually Non-VA) 3.3.1.8 Record any window on your Mac. Press Shift-Command-5. The Onscreen Controls will appear. Once the Onscreen Controls appear, click on one of the buttons with the record circle in the bottom right (4th icon from the left - Record Entire Screen or 5th icon from the left - Record Selected Portion) Click the down arrow under Options, located next to the record button. Under Microphone, select none to turn off audio recording. Under Options in the Onscreen Controls, adjust the recording window, setup a Timer, and where to Save To your recording. In the Menu Bar, click the Stop Recording button or press Command-Control-Esc (Escape) to stop recording. Reminder: Protect your privacy and only include information that is relevant for Team PSD prototyping. Reference: van den Haak, Maaike, De Jon, Menno, Schellens, &amp; Peter Jan. (2003). Retrospective vs. concurrent think-aloud protocols: Testing the usability of an online library catalogue. Behavior &amp; Information Technology, 22. https://doi.org/10.1080/0044929031000 3.3.2 Upload Screencast Video 3.3.2.1 Instructions Post user persona Concurrent Think Aloud videos testing Team PSD prototypes (aka MVPs: ‘minimum viable products’) to YouTube. 3.3.2.2 1. Create a Google Account If you don’t already have a gmail/Google account, select this link to create a Google account. https://accounts.google.com/SignUpWithoutGmail A Gmail is not required to sign up. This email is only used to login and will not be public. Uploaded user persona videos will be posted under the Brand Account LZPhD. 3.3.2.3 2. Share Email with Brand Account Manager Share the email associated with your Google account with a brand account manager to process an invitation. A brand account manager is any manager that already has access to the YouTube channel. Communicate through Microsoft Teams. 3.3.2.4 3. Manage YouTube Invitation Login to your Google account Select this link https://myaccount.google.com/brandaccounts Click Pending invitations. Select LZPhD. Accept invitation. Scroll down: “Act as LZPhD on”: Select the YouTube red icon. Navigate to the inbox associated with your Google account. You will see a confirmation in your inbox that reads, “You are now a manager of LZPhD”. Select the new email. You are now a manager Congratulations! 3.3.2.5 4. Upload User Persona Video Select Get started. Select the YouTube red icon. Your YouTube dashboard will open up. Navigate to the top right and select your circular profile pic. From the drop-down menu, select switch accounts. Select LZPhD. On the top right, Select the video camera + icon (Create). Select Upload video. Find the user persona video file you’d like to upload. 3.3.2.6 5. Convention for Video Details During Upload Use this naming convention “date_skill_training_user” ex: “2020_05_13_git_ch1_busy_pi” A description is not necessary at this time. No playlist. Audience Select, Yes, it is made for kids. This will remove any advertisements. Click Next advance to next screen Click Next, no video elements at this time. Visibility Select Unlisted only people with the link can see it. Click Save and your video will continue processing. You can safely logout of YouTube when your screencast is fully uploaded. 3.3.2.7 6. Speed Up or Slow Down YouTube Viewing While viewing your user persona video in YouTube, click the gear icon located on the bottom right. Select the “Speed” option. Choose a range of speeds. 3.4 Week 4: Review Second Story Perspectives In week 4, your prototype and MVPs should be able to be fully incorporated into Team PSD’s workflow as we do NOT want to spend time developing solutions that do not solve 80% of our team’s needs and utilizing only 20% effort in order to fail fast and fail cheap by quickly ruling out assumptions and solutions that do not work. Week 4 follows the last phase of the process for design thinking which involves the ability to review tests of your MVP and reflect on those tests that can help you even better mindfully and empathize with users, ultimately to further improve your skills for month’s design process. Test - Review tests your prototype with the user personas in question &amp; look for 2nd story perspectives. Does the prototype address the personas needs and pain points? What could we have missed or ignored from the user? What worked well in the month and what did not? 3.4.1 Reflect Second Stories Use these set of question to help think through Second Story Perspective Questions to reflect on the design process from the month: Do you see any places where moving forward independently could have been more aligned with the team or integrated better when you were done? Could a dependency or root assumption have been caught any sooner for the benefit of the team? Have you discovered a new empathic understanding of the situation from another users’ POV (point of view)? "],
["4-ms-teams.html", "Chapter 4 MS Teams 4.1 Quick Start Guide 4.2 Additional Tips/Functions", " Chapter 4 MS Teams TeamPSD and the VA are both using Microsoft Teams as their main communication platform. TeamPSD is currently using the Free Version of Microsoft Teams so the entire team can get used to it as the VA begins to roll it out system-wide between mid-July to early August. 4.1 Quick Start Guide To review the basics of Microsoft Teams, check out their Quick Start Guide. This guide will help you learn the basic user interface functions of Microsoft Teams (Free version or VA) such as: Signing In Manage your profile settings Choose/browse channels Start a meeting or call Start a new conversation thread Reply within a message/conversation thread @ Mention someone Start a 1:1 or small group chat Add/Share/Work with Files and more! 4.2 Additional Tips/Functions 4.2.1 Switch Organizations To switch out of an organization: Click on the organization you are currently in, located next your profile picture &amp; name. To switch out of the organization, click on the organization you want to switch into. 4.2.2 Meet in a Channel To know where a meeting call is being held in a channel: Look to see the purple video icon next to a channel’s name. 4.2.3 Edit Message/Reply To edit a message: Drag your cursor over to an existing comment and click on the 3 dots next to the 6 “react” emojis. Select the pencil icon Edit button. After finishing your edit, select the check mark button to publish or the “x button” to exit out of the draft. 4.2.4 Use Markdown Teams is Markdown friendly! Try using basic markdown such as bolding or italicizing text in a comment/reply. 4.2.5 Start a Call in a Thread To start a meeting call within the same conversation thread to keep context: In the conversation thread, click on the reply button. Click on the video icon button to begin a call. 4.2.6 “React” to a Comment To “React” to a comment or reply to acknowledge it: Drag your cursor over to an existing comment and select 1 of the 6 emojis to “react” to it. 4.2.7 Link a Comment/Discussion/File To link to a specific thread or comment or file: Drag your cursor over to an existing comment and click on the 3 dots next to the 6 “react” emojis. Click on hyperlink icon copy link button to copy the link to the location of that thread/comment/file. "],
["5-github-zenhub.html", "Chapter 5 GitHub + ZenHub 5.1 GitHub Repositories 5.2 Manage with ZenHub 5.3 Track Issues &amp; Features 5.4 Use Markdown 5.5 Use Branches", " Chapter 5 GitHub + ZenHub TeamPSD’s main platform for project tracking is GitHub + the extension of ZenHub for project management. 5.1 GitHub Repositories 5.1.1 Workflow 5.1.2 Non-VA Repositories lzim/teampsd (Public) This repository contains TeamPSD resources and track the work that the team uses internally (i.e. Bookdown, document_team, depend_products, etc.) lzim/mtl (Public) This repository supports Modeling to Learn and contain the content in describe_learners, detail facilitators, and SIM/Model Code. lzim/sim (Public) This repository supports the Modeling to Learn Simulation User Interface plaform, Forio Epicenter, &amp; and model files from Vensim DSS. lzim/research (Private) This repository holds the analysis for the (R01, IIR, R21) and disseminate science. lzim/mtl_team_tracker (Private) This repository is used by VA Clinicians and Modeling to Learn Co-facilitators to track team progression. 5.1.3 VA Enterprise Repositories “va/mtl” (operations pipeline) This repository stores the operations code used to support Modeling to Learn teams. “va/research” research pipeline) This repository holds the backend code that needs to stay internal for our grants. 5.2 Manage with ZenHub Team PSD uses the GitHub Google Chrome extension, ZenHub, for agile project management. We use ZenHub to: - see all of our Team PSD’s workflow at a glance. - organize and prioritize existing issues and features. - track dependencies across workgroups. - plan for our month’s work in a Epic and plan for further Epics down the road. 5.2.1 Enable ZenHub within GitHub Click here for the ZenHub Google Chrome extension. 5.2.2 View Roadmap + Epics 5.2.3 Add Epics to Issues 5.2.4 Define Workspaces 5.2.5 Add Dependencies 5.2.6 Estimate Issues 5.2.7 9 Clicks for Issues 5.2.8 Manage Workgroup Workflows 5.2.9 Filter Workspace 5.2.10 Track Notifications 5.2.11 Create &amp; Manage Issues 5.2.12 View Reports 5.2.13 Test First Epic (go_live) 5.3 Track Issues &amp; Features 5.3.1 Create Issue/Feature cards [click maps] Click map would explain process here 5.3.2 Maintaining Cards [flow map] Flow map to maintain your issue/features cards as they get worked on. We will wait for these flow maps until Branching MVP is tested: [Track a bug] might change [Track a feature] might change. Previous Issue Card Flow Map: 5.4 Use Markdown 5.4.1 Language cheatsheet 5.4.2 Files 5.4.2.1 Add 5.4.2.2 Go 5.4.2.3 Edit 5.5 Use Branches 5.5.1 Features 5.5.1.1 Create 5.5.1.2 Edit 5.5.1.3 Tests 5.5.2 QA 5.5.2.1 Orientation Map 5.5.2.2 Edit 5.5.2.3 Tests 5.5.2.4 Merge "],
["6-glossary.html", "Chapter 6 Glossary 6.1 Terms 6.2 Acronyms", " Chapter 6 Glossary 6.1 Terms @ Mentions: to notify a person on GitHub by using @ before their username. Users in an organization on GitHub can also be a part of a team that can be mentioned. App: Allows you to automate and improve the GitHub workflow. Team PSD can use apps to automate simple tasks and enforce standards. Application Programming Interface (API): We use APIs as a call to send data from our GitHub repository to GitHub Apps and Actions. Assignee: The member that is assigned to an issue or feature card. Branches: A branch is a parallel version of a GitHub repository. It is contained within the repository, but does not affect the primary or master branch allowing you to work freely without disrupting the “live” version. When you’ve made the changes you want to make, you can merge your branch back into the master branch to publish your changes. Bug: An existing feature that has been developed and is not working correctly and should be documented in an issue card on GitHub to be resolved. Card: A movable square within an associated and contain documentation for Issue tasks, Bugs, Features, or Pull Requests. You may see issue cards on GitHub Kanban Trackers and on the ZenHub Workspace Board. Code of conduct: A document that defines standards for how to engage in a community on GitHub. Comment: Add comments within GitHub issue cards to keep discussion going all within context. Compare branch: The branch you use to create a pull request in GitHub. This branch is compared to the base branch you choose for the pull request, and the changes are identified. When the pull request is merged, the base branch is updated with the changes from the compare branch. Also known as the “head branch” of the pull request. Concurrent Screencast Video: Screencasted videos allows for asynchronous feedback to be provided. These videos consist of users going through the MVP without audio to concurrently focus on the task of seeing/trying out the MVP and whether or not it addresses their user-centered hypotheses and pain points. Videos should be uploaded on the LZPhD YouTube channel. Continuous Deployment (CD): Automatic releases to a test or production environment if all the tests from the Continuous Integration (See Continuous Integration) process pass. Continuous Integration (CI): Practice of integrating changes “continuously”, coupled with automated testing to allow for a function and always up-to-date repository base. Continuous Learning: The Continuous Learning Culture competency describes a set of values and practices that encourage individuals—and the enterprise as a whole—to continually increase knowledge, competence, performance, and innovation. Community of Practice (COP): Communities of Practice (CoPs) are organized groups of people who have a common interest in a specific technical or business domain. They collaborate regularly to share information, improve their skills, and actively work on advancing the general knowledge of the domain. Deliverable: A product of a task or group of tasks. Design Thinking Process: Design Thinking is a customer-centric development process that creates desirable products that are profitable and sustainable over their lifecycle. The Process consists of Emphasizing, Defining, Ideating, Prototyping, and Testing (see Team PSD 2.0 Monthly Process). Dependency (Blocking/blockers): Use a blocking/blocker to add a dependency on your GitHub issue card to alert others that a task cannot be done without another task or vice versa. Documentation: Materials or descriptions that provide information about a topic. The team uses documentation to ensure that our work is transparent, reproducible, and understandable for both team members and external partners. Epic: Epics are ~1 month’s worth of sprints that go by the week. Each month is a new epic (e.g In August, our Epic is aug_epic). Estimate: Points following the Fibonacci sequence to describe the level of effort, not hours, required to complete an issue or feature. We can think of these as t-shirt sizes: Expedite: To move the priority of a bug or feature in GitHub to the top of a queue. Expediting is poison to a production system and should be used only in exigent circumstances. Feature: A characteristic, attribute or topic that requires work breakdown, research, design, development and testing. Features can be tagged as “fast_track” in order to expedite its design and development. The features documentation of requirements will be in a GitHub Feature card and placed in the appropriate feature_tracker column. Fork: A fork is a personal copy of another user’s GitHub repository that lives on your account. Forks allow you to freely make changes to a project without affecting the original upstream repository. You can also open a pull request in the upstream repository and keep your fork synced with the latest changes since both repositories are still connected. Git: Git is an open source program for tracking changes in text files. It was written by the author of the Linux operating system, and is the core technology that GitHub, the social and user interface, is built on top of. GitHub: Team PSD’s main platform to track work from each Team PSD Workflow (Research, Operations, and Modeling to Learn) based on GitHub repositories. GitHub Actions: GitHub Actions help automate repository workflows and tasks on GitHub. You can write individual tasks, called actions, and combine them to create a custom workflow. Workflows are custom automated processes that you can set up in your repository to build, test, package, release, or deploy any project on GitHub. Issue: Issues are an important tasks or problems to be worked on and may be discussed with others to resolve and close in a GitHub Issue card. Labels: A tag in GitHub that is affixed by an originator or workgroup as a means to identify the task holders for a specific issue. Workgroup leads can filter by labels in the tracker to sort for their specific workgroup or other workgroups’ Kanban cards in the search bar found in the upper right-hand corner of each tracker (below). To use the filter function, use the code “label:labelname” i.e. “label:facilitate” or “label:sim_ui”. (You can use this function with other sort options as well i.e. author:lzim, etc.). In most cases, an issue should only have 1 label at any given time. LucidCharts: Platform that enables the creation of charts and flows. The team uses LucidCharts for pictorial documentation. Markdown (language and file format): Markdown is an incredibly simple semantic file format, not too dissimilar from .doc, .rtf and .txt. Markdown makes it easy for even those without a web-publishing background to write prose (including with links, lists, bullets, etc.) and have it displayed like a website. GitHub supports Markdown and uses a particular form of Markdown called GitHub Flavored Markdown. Master Card: GitHub Master Cards typically do not have an Assignee, Milestone, Estimate, (with the exception of some Manuscript cards for the PI) as their purpose is to document and track all related issue task cards and/or requirements. These cards usually live in their respective Kanban Tracker and/or ZenHub pipeline. Master Document Card: The Master Document Card is a tracking card on GitHub that tracks all of an Issue task’s requirements and multiple Issue task cards related to 1 big Issue that had to be broken down into small tasks. Master Document Cards flows through the document_tracker Kanban and open_documents ZenHub pipeline. Master Feature Card: The Master Feature Card is a tracking card on GitHub that tracks a customer requirement through design to testing. It defines a customer’s requirement, design features that support the requirement and test criteria that demonstrate the design criteria meets the customer requirement. Master Feature Cards flows through the feature_tracker Kanban and open_features ZenHub pipeline. Master Manuscript Card: The Master Manuscript Card is a tracking card on GitHub that tracks all of an Manuscript related Issue task’s requirements and multiple Issue task cards related to 1 big Manuscript Issue that had to be broken down into small tasks. Master Manuscript Cards flows through the manuscript_tracker Kanban and open_manuscripts ZenHub pipeline. Merge: Merging takes the changes from one branch (in the same GitHub repository or from a fork), and applies them into another on GitHub. This often happens as a “pull request” (which can be thought of as a request to merge), or via the command line. A merge can be done through a pull request via the GitHub.com web interface if there are no conflicting changes, or can always be done via the command line. Merge conflict: A difference that occurs between merged branches on GitHub. Merge conflicts happen when people make different changes to the same line of the same file, or when one person edits a file and another person deletes the same file. The merge conflict must be resolved before you can merge the branches. Milestone: Milestones are the monthly workgroup sprints, in which each workgroup tries to accomplish their monthly milestone goals for the monthly epic. Minimum Viable Product (MVP): A new/revised product that attempts to address a user or user groups pain points and needs (See User-Centered Hypotheses). The MVP should follow the 80/20 Pareto Principle (created with the least amount/20% of effort but solves majority/80% of pain points/needs). Persona: A description that is used to represent a user or a user groups’ needs and pain points (see User-Centered Hypotheses) with specific skills, goals, attittudes, and the background of the user to account for while creating and prototyping an MVP. Principles: Rules or beliefs that may be in service of multiple key Values. Project (Kanban Tracker Board): A board that contains issue cards and is used to communicate the status and priority of bugs, features, documentation, &amp; manuscripts as they move through the production process. There are four Kanban to manage production in the Team PSD are: bug_tracker, feature_tracker, document_tracker, and manuscript_tracker. Prototyping: Occurs during Week 2 of the Team PSD 2.0 Monthly Process, prototyping is to build or create a final product or MVP (see Minimum Viable Product) as a way to understand what it should do, how it should be interacted, and see how the product or MVP will look like before completion. The user or user groups’ pain points should be taken into account of while prototyping (see User-Centered Hypotheses). Pull request: Pull requests are proposed changes to a GitHub repository submitted by a user and accepted or rejected by a repository’s collaborators. Like issues, pull requests each have their own discussion forum. Pull request review: Comments from collaborators on a GitHub pull request that approve the changes or request further changes before the pull request is merged. Readme: A GitHub text file containing information about the files in a repository that is typically the first file a visitor to your repository will see. A README file, along with a repository license, contribution guidelines, and a code of conduct, helps you share expectations and manage contributions to your project. Refactoring: Refactoring is needed when we have to make upgrades over time and/or prepare for new, incoming features. Refactoring requires internal changes, without effecting external behavior. Release: GitHub issues that are grouped into a key team release. Repository: A repository is the most basic element of GitHub. They’re easiest to imagine as a project’s folder. A repository contains all of the project files (including documentation), and stores each file’s revision history. Repositories can have multiple collaborators and can be either public or private. Repository (Private): Private GitHub repositories are only visible to the repository owner and collaborators that the owner specified. Retrospective Verbal: A retrospective verbal is a written out set of feedback and response after the user finishes testing and looking through an MVP and thinking about whether or not the MVP addressed their user-centered hypotheses and pain points. Second Story Perspectives: A retrospective look during Week 4 of the Team PSD 2.0 Monthly Spring to discuss what happened in the Epic, the results of the Iteration, review their practices, and identify ways to improve for the next Epic. Task: A cognitive or kinetic behavior that consumes time. A task or group of tasks are necessary to create an outcome or deliverable. Team PSD 2.0 Monthly Process: The 2.0 Monthly Process for Epics/Milestones follows the design thinking process based on concepts from user experience to scale and make Team PSD’s workflow become asynchronous to better support the needs and pain points (See User-Centered Hypotheses) of a user with a product that can also be integrated by the end of the month for the team to use. The Monthly Process goes by weeks. Week 1: Gather user-centered hypotheses Week 2: Clarify user assumptions w/ Minimum Viable Product (MVP) test Week 3: Review results of user persona testing of your MVP Prototype (with concurrent video and retrospective verbal) Week 4: Review user persona artifacts and second story perspectives mindfully and empathically to discover new understandings you might have missed or still need to learn Team PSD Workflows: Team PSD has 3 workflows: Research, Operations, and Modeling to Learn. Think Aloud Protocols: These user testing protocols typically involve participants thinking aloud as they are performing a set of specified tasks. Participants are asked to say whatever comes into their mind as they complete the task. This might include what they are looking at, thinking, doing, and feeling. Team PSD does a combination of a concurrent and retrospective think aloud protocol (see Concurrent Screencast Video and Retrospective Verbal). User Experience: A person’s emotions and attitudes about using a particular product, system/workflow or service. The Team PSD 2.0 Process is based on the foundation of the user’s experience to ensure Products integrated by the end of the monthly Epic address the person’s emotions, attitudes, pain points, and needs. User Testing: Occurs during Week 3 of the Team PSD 2.0 Process, user testing is the process through which the MVP is tested by the targeted users who perform specific and realistic tasks using the MVP. User-Centered Hypotheses: Gathered in Week 1 of the Team PSD 2.0 Process, these are the pain point and needs of a user that is struggling in either a task or parts of the workflow within Team PSD’s Operations, Research, and/or Modeling to Learn pipeline. The pain points and needs should be turned into hypotheses that can be tested and reiterated throughout the Team PSD 2.0 Monthly Process cycle to address and resolve the pain points and needs of a user/user group. Values: Virtues that govern the team’s principles. Values can be in conflict with Principles, especially when it comes to applying Values in any given action. YAML Ain’t Markup Language (YAML or YML): Data serialization language that is used to set configurations for other applications to read and have information about the document/script. YAML will be used by the team to setup App configurations and in our documentation to enable transfers between other documents. GitHub Action workflow files use .YML files. ZenHub: A Google Chrome extension that allows agile project management within GitHub. ZenHub 9 clicks: Every issue card must be in a pipeline, have an assignee, labeled, added dependencies, added to a tracker (if applicable), milestone, epic, estimated with points, in an epic and/or project (if applicable), within a release (if applicable), and associated with pull requests (if necessary). ZenHub Pipelines: Pipelines are columns within the overall ZenHub Board to show where Issues belong in which pipeline, allowing for a clear and consistent flow of Issues across the Board. You can click on the light grey (i) icon within each pipeline to see the description. 6.2 Acronyms AAHRPP: Association for the Accreditation of Human Research Protection Program ACCME: Accreditation Council for Continuing Medical Education ACORP: Animal Component of Research Protocol ADPAC: Automated Data Processing Application Coordinator ANCC: American Nurses Credentialing Center APA: American Psychological Association ASWB: Association of Social Work Boards ATS: Addiction Treatment Services AUD: Alcohol Use Disorder BHIP: Behavioral Health Integration Project BISL: Business Intelligence Service Line CBOC: Community Based Outpatient Clinic CC: Care Coordination CFIR: Consolidated Framework for Implementation Research CHCE: Center for Health Care Evaluation CPRS: Computerized Patient Record System CPT Code: Current Procedural Terminology CRADA: Cooperative Research and Development Agreement CSP: Cooperative Studies Program CTR3: Center for Tissue Regeneration, Rehabilitation, and Repair CWT: Comprehensive Work Therapy DEA: Drug Enforcement Agency DHHS: Department of Health &amp; Human Services EBP: Evidence-Based Practices EBPharm: Evidence-Based Pharmacotherapy EBPsy: Evidence-Based Psychotherapy EES: Employee Education Services F&amp;A Rate: Facilities &amp; Administrative Rate FAR: Federal Acquisition Regulations FTE: Full Time Equivalent GHPC: Georgia Health Policy Center GRECC: Geriatric Research, Education and Clinical Center HERC: Health Economics Resource Center HSR&amp;D: Health Services Research and Development Services IACUC: Institutional Animal Care and Use Committee INAPS: International Association of Peer Supporters IOP: Intensive Outpatient Program IPA: Intergovernmental Personnel Act IRB: Institutional Review Board JPA: Joint Personnel Agreement LD: Livermore Division MAT: Medication Assisted Therapy MHICM: Mental Health Intensive Case Management MHTC: Mental Health Treatment Coordinators MIRECC: Mental Illness Research, Education, and Clinical Center MM: Medication Management MPD: Menlo Park Division NAVREF: National Association of Veteran’s Research and Education Foundations NBCC: National Board for Certified Counselors NCPTSD-DT: National Center for Posttraumatic Stress Disorder, Dissemination &amp; Training NIH: National Institutes of Health OGC: Office of General Counsel OMB: Office of Management &amp; Budget OMHO: Office of Mental Health Operations (now OMHSP) OMHSP: Office of Mental Health &amp; Suicide Prevention (previously OMHO) OPM: Office of Personnel Management ORO: Office of Research Oversight OUD: Opioid Use Disorder PAD: Palo Alto Division PAIRE: Palo Alto Institute for Research and Education, Inc. PAVIR: Palo Alto Veterans Institute for Research PCP: Primary Care PHysician PCT: PTSD Clinical Team PE: Prolonged Exposure PERC: Program Evaluation and Resource Center PHI: Protected Health Information PI: Prinicipal Investigator PSA: Personal Services Agreement PSD: Participatory System Dynamics QI: Quality Improvement QIIC: Quality Improvement Implementation Consultant R&amp;DC: Research and Development Committee RDIS: Research and Development Information System rJPA: Reverse Joint Personnel Agreement SAIL: Strategic Analytics for Improvement and Learning Sankey: A type of flow diagram where the width of the arrows are proportional to the flow quantity “Say File”: GitHub file for the facilitators to read from “See File”: GitHub file for learners to look at at SME: Subject Matter Expert SMI: Serious Mental Illness SRC: Scientific Review Committee SRS: Subcommittee on Research Safety SU: Stanford University SUD: Substance Use Disorder UI: User Interface VA: Veterans Affairs VAPAHCS: Veterans Affairs Palo Alto Health Care System VAPOR: Veterans Advisory Partnership for Operations and Research VERC: Veterans Engineering Resource Center VHA: Veterans Health Administration VISN: Veterans Integrated Service Network VISTA: Veterans Health Information Systems and Technology Architecture WCC: Women’s Counseling Center WRIISC: War Related Illness &amp; Injury Study Center WRVU: Work Relative Value Unit X Waiver: Needed to prescribe buprenorphine; must complete training and still limits # of patients per physician that can receive bup "]
]
